'use strict';

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var addDays = _interopDefault(require('date-fns/add_days'));
var isBefore = _interopDefault(require('date-fns/is_before'));
var isToday = _interopDefault(require('date-fns/is_today'));
var startOfDay = _interopDefault(require('date-fns/start_of_day'));
var differenceInCalendarMonths = _interopDefault(require('date-fns/difference_in_calendar_months'));
var React = _interopDefault(require('preact'));

/**
 * This is intended to be used to compose event handlers
 * They are executed in order until one of them calls
 * `event.preventDefault()`. Not sure this is the best
 * way to do this, but it seems legit...
 * @param {Function} fns the event hanlder functions
 * @return {Function} the event handler to add to an element
 */
function composeEventHandlers() {
  for (var _len = arguments.length, fns = Array(_len), _key = 0; _key < _len; _key++) {
    fns[_key] = arguments[_key];
  }

  return function (event) {
    for (var _len2 = arguments.length, args = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
      args[_key2 - 1] = arguments[_key2];
    }

    return fns.some(function (fn) {
      fn && fn.apply(undefined, [event].concat(args));
      return event.defaultPrevented;
    });
  };
}

/**
 * Throws a helpful error message for required properties. Useful
 * to be used as a default in destructuring or object params.
 * @param {String} fnName the function name
 * @param {String} propName the prop name
 */
function requiredProp(fnName, propName) {
  throw new Error('The property "' + propName + '" is required in "' + fnName + '"');
}

/**
 * Takes an argument and if it's an array, returns the first item in the array
 * otherwise returns the argument.
 * @param {*} arg the maybe-array
 * @return {*} the arg or it's first item
 */
function unwrapChildrenForPreact(arg) {
  arg = Array.isArray(arg) ? /* istanbul ignore next (preact) */arg[0] : arg;
  return arg || noop;
}
function noop() {}

/**
 * Takes a calendars array and figures out the number of months to subtract
 * based on the current offset and the minDate allowed.
 * @param {Object} param The param object
 * @param {Array} param.calendars The calendars array created by the getCalendars function
 * @param {Number} param.offset The num of months to be subtracted
 * @param {Date} param.minDate The earliest date we are allow to subtract back to
 * @returns {Number} The number of months to subtract
 */
function subtractMonth(_ref) {
  var calendars = _ref.calendars,
      offset = _ref.offset,
      minDate = _ref.minDate;

  if (offset > 1 && minDate) {
    var firstDayOfMonth = calendars[0].firstDayOfMonth;

    var diffInMonths = differenceInCalendarMonths(firstDayOfMonth, minDate);
    if (diffInMonths < offset) {
      offset = diffInMonths;
    }
  }
  return offset;
}

/**
 * Takes a calendars array and figures out the number of months to add
 * based on the current offset and the maxDate allowed.
 * @param {Object} param The param object
 * @param {Array} param.calendars The calendars array created by the getCalendars function
 * @param {Number} param.offset The num of months to be added
 * @param {Date} param.maxDate The furthest date we are allow to add forward to
 * @returns {Number} The number of months to add
 */
function addMonth(_ref2) {
  var calendars = _ref2.calendars,
      offset = _ref2.offset,
      maxDate = _ref2.maxDate;

  if (offset > 1 && maxDate) {
    var lastDayOfMonth = calendars[calendars.length - 1].lastDayOfMonth;

    var diffInMonths = differenceInCalendarMonths(maxDate, lastDayOfMonth);
    if (diffInMonths < offset) {
      offset = diffInMonths;
    }
  }
  return offset;
}

/**
 * Takes a calendars array and figures out if the back button should be
 * disabled based on the minDate allowed.
 * @param {Object} param The param object
 * @param {Array} param.calendars The calendars array created by the getCalendars function
 * @param {Date} param.minDate The earliest date available
 * @returns {Boolean} Whether the back button should be disabled.
 */
function isBackDisabled(_ref3) {
  var calendars = _ref3.calendars,
      minDate = _ref3.minDate;

  if (!minDate) {
    return false;
  }
  var firstDayOfMonth = calendars[0].firstDayOfMonth;

  var firstDayOfMonthMinusOne = addDays(firstDayOfMonth, -1);
  if (isBefore(firstDayOfMonthMinusOne, minDate)) {
    return true;
  }
  return false;
}

/**
 * Takes a calendars array and figures out if the forward button should be
 * disabled based on the maxDate allowed.
 * @param {Object} param The param object
 * @param {Array} param.calendars The calendars array created by the getCalendars function
 * @param {Date} param.maxDate The furthest date available
 * @returns {Boolean} Whether the forward button should be disabled.
 */
function isForwardDisabled(_ref4) {
  var calendars = _ref4.calendars,
      maxDate = _ref4.maxDate;

  if (!maxDate) {
    return false;
  }
  var lastDayOfMonth = calendars[calendars.length - 1].lastDayOfMonth;

  var lastDayOfMonthPlusOne = addDays(lastDayOfMonth, 1);
  if (isBefore(maxDate, lastDayOfMonthPlusOne)) {
    return true;
  }
  return false;
}

/**
 * Figures out the months data needed based off the number of monthsToDisplay
 * and other options provided.
 * @param {Object} param The param object
 * @param {Date} param.date The date to start the calendar at
 * @param {Array.<Date>} param.selected An array of dates currently selected
 * @param {Number} param.monthsToDisplay The number of months to return in the calendar view
 * @param {Number} param.offset The number of months to offset based off the param.date given
 * @param {Date} param.minDate The earliest date available
 * @param {Date} param.maxDate The furthest date available
 * @param {Number} param.firstDayOfWeek First day of week, 0-6 (Sunday to Saturday)
 * @param {Bool} param.showOutsideDays Flag to fill front and back weeks with dates from adjacent months
 * @returns {Array.<Object>} An array of objects with month data
 */
function getCalendars(_ref5) {
  var date = _ref5.date,
      selected = _ref5.selected,
      monthsToDisplay = _ref5.monthsToDisplay,
      offset = _ref5.offset,
      minDate = _ref5.minDate,
      maxDate = _ref5.maxDate,
      firstDayOfWeek = _ref5.firstDayOfWeek,
      showOutsideDays = _ref5.showOutsideDays;

  var months = [];
  var startDate = getStartDate(date, minDate, maxDate);
  for (var i = 0; i < monthsToDisplay; i++) {
    var calendarDates = getMonths({
      month: startDate.getMonth() + i + offset,
      year: startDate.getFullYear(),
      selectedDates: selected,
      minDate: minDate,
      maxDate: maxDate,
      firstDayOfWeek: firstDayOfWeek,
      showOutsideDays: showOutsideDays
    });
    months.push(calendarDates);
  }
  return months;
}

/**
 * Figures out the actual start date based on
 * the min and max dates available.
 * @param {Date} date The we want to start the calendar at
 * @param {Date} minDate The earliest date available to start at
 * @param {Date} maxDate The latest date available to start at
 * @returns {Date} The actual start date
 */
function getStartDate(date, minDate, maxDate) {
  var startDate = startOfDay(date);
  if (minDate) {
    var minDateNormalized = startOfDay(minDate);
    if (isBefore(startDate, minDateNormalized)) {
      startDate = minDateNormalized;
    }
  }
  if (maxDate) {
    var maxDateNormalized = startOfDay(maxDate);
    if (isBefore(maxDateNormalized, startDate)) {
      startDate = maxDateNormalized;
    }
  }
  return startDate;
}

/**
 * Figures what week/day data to return for the given month
 * and year. Adds flags to day data if found in the given selectedDates,
 * if is selectable inside the given min and max dates, or is today.
 * @param {Object} param The param object
 * @param {Number} param.month The month to grab data for
 * @param {Number} param.year The year to grab data for
 * @param {Array.<Date>} sparam.electedDates An array of dates currently selected
 * @param {Date} param.minDate The earliest date available
 * @param {Date} param.maxDate The furthest date available
 * @param {Number} param.firstDayOfWeek First day of week, 0-6 (Sunday to Saturday)
 * @param {Bool} param.showOutsideDays Flag to fill front and back weeks with dates from adjacent months
 * @returns {Object} The data for the selected month/year
 */
function getMonths(_ref6) {
  var month = _ref6.month,
      year = _ref6.year,
      selectedDates = _ref6.selectedDates,
      minDate = _ref6.minDate,
      maxDate = _ref6.maxDate,
      firstDayOfWeek = _ref6.firstDayOfWeek,
      showOutsideDays = _ref6.showOutsideDays;

  // Get the normalized month and year, along with days in the month.
  var daysMonthYear = getNumDaysMonthYear(month, year);
  var daysInMonth = daysMonthYear.daysInMonth;
  month = daysMonthYear.month;
  year = daysMonthYear.year;

  // Fill out the dates for the month.
  var dates = [];
  for (var day = 1; day <= daysInMonth; day++) {
    var date = new Date(year, month, day);
    var dateObj = {
      date: date,
      selected: isSelected(selectedDates, date),
      selectable: isSelectable(minDate, maxDate, date),
      today: isToday(date),
      prevMonth: false,
      nextMonth: false
    };
    dates.push(dateObj);
  }

  var firstDayOfMonth = new Date(year, month, 1);
  var lastDayOfMonth = new Date(year, month, daysInMonth);

  var frontWeekBuffer = fillFrontWeek({
    firstDayOfMonth: firstDayOfMonth,
    minDate: minDate,
    maxDate: maxDate,
    selectedDates: selectedDates,
    firstDayOfWeek: firstDayOfWeek,
    showOutsideDays: showOutsideDays
  });

  var backWeekBuffer = fillBackWeek({
    lastDayOfMonth: lastDayOfMonth,
    minDate: minDate,
    maxDate: maxDate,
    selectedDates: selectedDates,
    firstDayOfWeek: firstDayOfWeek,
    showOutsideDays: showOutsideDays
  });

  dates.unshift.apply(dates, frontWeekBuffer);
  dates.push.apply(dates, backWeekBuffer);

  // Get the filled out weeks for the
  // given dates.
  var weeks = getWeeks(dates);
  // return the calendar data.
  return {
    firstDayOfMonth: firstDayOfMonth,
    lastDayOfMonth: lastDayOfMonth,
    month: month,
    year: year,
    weeks: weeks
  };
}

/**
 * Fill front week with either empty buffer or dates from previous month,
 * depending on showOutsideDays flag
 * @param {Object} param The param object
 * @param {Array.<Date>} param.selectedDates An array of dates currently selected
 * @param {Date} param.minDate The earliest date available
 * @param {Date} param.maxDate The furthest date available
 * @param {Date} param.firstDayOfMonth First day of the month
 * @param {Number} param.firstDayOfWeek First day of week, 0-6 (Sunday to Saturday)
 * @param {Bool} param.showOutsideDays Flag to fill front and back weeks with dates from adjacent months
 * @returns {Array.<Date>} Buffer to fill front week
 */
function fillFrontWeek(_ref7) {
  var firstDayOfMonth = _ref7.firstDayOfMonth,
      minDate = _ref7.minDate,
      maxDate = _ref7.maxDate,
      selectedDates = _ref7.selectedDates,
      firstDayOfWeek = _ref7.firstDayOfWeek,
      showOutsideDays = _ref7.showOutsideDays;

  var dates = [];
  var firstDay = (firstDayOfMonth.getDay() + 7 - firstDayOfWeek) % 7;

  if (showOutsideDays) {
    var lastDayOfPrevMonth = addDays(firstDayOfMonth, -1);
    var prevDate = lastDayOfPrevMonth.getDate();
    var prevDateMonth = lastDayOfPrevMonth.getMonth();
    var prevDateYear = lastDayOfPrevMonth.getFullYear();

    // Fill out front week for days from
    // preceding month with dates from previous month.
    var counter = 0;
    while (counter < firstDay) {
      var date = new Date(prevDateYear, prevDateMonth, prevDate - counter);
      var dateObj = {
        date: date,
        selected: isSelected(selectedDates, date),
        selectable: isSelectable(minDate, maxDate, date),
        today: false,
        prevMonth: true,
        nextMonth: false
      };
      dates.unshift(dateObj);
      counter++;
    }
  } else {
    // Fill out front week for days from
    // preceding month with buffer.
    while (firstDay > 0) {
      dates.unshift('');
      firstDay--;
    }
  }

  return dates;
}

/**
 * Fill back weeks with either empty buffer or dates from next month,
 * depending on showOutsideDays flag
 * @param {Object} param The param object
 * @param {Array.<Date>} param.selectedDates An array of dates currently selected
 * @param {Date} param.minDate The earliest date available
 * @param {Date} param.maxDate The furthest date available
 * @param {Date} param.lastDayOfMonth Last day of the month
 * @param {Number} param.firstDayOfWeek First day of week, 0-6 (Sunday to Saturday)
 * @param {Bool} param.showOutsideDays Flag to fill front and back weeks with dates from adjacent months
 * @returns {Array.<Date>} Buffer to fill back week
 */
function fillBackWeek(_ref8) {
  var lastDayOfMonth = _ref8.lastDayOfMonth,
      minDate = _ref8.minDate,
      maxDate = _ref8.maxDate,
      selectedDates = _ref8.selectedDates,
      firstDayOfWeek = _ref8.firstDayOfWeek,
      showOutsideDays = _ref8.showOutsideDays;

  var dates = [];
  var lastDay = (lastDayOfMonth.getDay() + 7 - firstDayOfWeek) % 7;

  if (showOutsideDays) {
    var firstDayOfNextMonth = addDays(lastDayOfMonth, 1);
    var nextDateMonth = firstDayOfNextMonth.getMonth();
    var nextDateYear = firstDayOfNextMonth.getFullYear();

    // Fill out back week for days from
    // following month with dates from next month.
    var counter = 0;
    while (counter < 6 - lastDay) {
      var date = new Date(nextDateYear, nextDateMonth, 1 + counter);
      var dateObj = {
        date: date,
        selected: isSelected(selectedDates, date),
        selectable: isSelectable(minDate, maxDate, date),
        today: false,
        prevMonth: false,
        nextMonth: true
      };
      dates.push(dateObj);
      counter++;
    }
  } else {
    // Fill out back week for days from
    // following month with buffer.
    while (lastDay < 6) {
      dates.push('');
      lastDay++;
    }
  }

  return dates;
}

/**
 * Normalizes month (could be overflow) and year pairs and returns the
 * normalized month and year along with the number of days in the month.
 * @param {Number} month The month to normalize
 * @param {Number} year The year to normalize
 * @returns {Object} The normalized month and year along with the number of days in the month
 */
function getNumDaysMonthYear(month, year) {
  // If a parameter you specify is outside of the expected range for Month or Day,
  // JS Date attempts to update the date information in the Date object accordingly!
  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setMonth
  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setDate

  // Let Date handle the overflow of the month,
  // which should return the normalized month and year.
  var normalizedMonthYear = new Date(year, month, 1);
  month = normalizedMonthYear.getMonth();
  year = normalizedMonthYear.getFullYear();
  // Overflow the date to the next month, then subtract the difference
  // to get the number of days in the previous month.
  // This will also account for leap years!
  var daysInMonth = 32 - new Date(year, month, 32).getDate();
  return { daysInMonth: daysInMonth, month: month, year: year };
}

/**
 * Takes an array of dates, and turns them into a multi dimensional
 * array with 7 entries for each week.
 * @param {Array.<Object>} dates An array of dates
 * @returns {Array} The weeks as a multi dimensional array
 */
function getWeeks(dates) {
  var weeksLength = Math.ceil(dates.length / 7);
  var weeks = [];
  for (var i = 0; i < weeksLength; i++) {
    weeks[i] = [];
    for (var x = 0; x < 7; x++) {
      weeks[i].push(dates[i * 7 + x]);
    }
  }
  return weeks;
}

/**
 * Normalizes dates to the beginning of the day,
 * then checks to see if the day given is found
 * in the selectedDates.
 * @param {Array.<Date>} selectedDates An array of dates currently selected
 * @param {Date} date The date to search with against selectedDates
 * @returns {Boolean} Whether day is found in selectedDates
 */
function isSelected(selectedDates, date) {
  selectedDates = Array.isArray(selectedDates) ? selectedDates : [selectedDates];
  return selectedDates.some(function (selectedDate) {
    if (selectedDate instanceof Date && startOfDay(selectedDate).getTime() === startOfDay(date).getTime()) {
      return true;
    }
    return false;
  });
}

/**
 * Checks to see if the date given is
 * between the min and max dates.
 * @param {Date} minDate The earliest date available
 * @param {Date} maxDate The furthest date available
 * @param {Date} date The date to compare with
 * @returns {Boolean} Whether the date is between min and max date
 */
function isSelectable(minDate, maxDate, date) {
  if (minDate && isBefore(date, minDate) || maxDate && isBefore(maxDate, date)) {
    return false;
  }
  return true;
}

var classCallCheck = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];

    for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }

  return target;
};

var inherits = function (subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
};

var objectWithoutProperties = function (obj, keys) {
  var target = {};

  for (var i in obj) {
    if (keys.indexOf(i) >= 0) continue;
    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;
    target[i] = obj[i];
  }

  return target;
};

var possibleConstructorReturn = function (self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return call && (typeof call === "object" || typeof call === "function") ? call : self;
};

var Dayzed = function (_React$Component) {
  inherits(Dayzed, _React$Component);

  /* TODO: Remove this block in next major release */
  function Dayzed(props) {
    classCallCheck(this, Dayzed);

    /* eslint-disable */
    var _this = possibleConstructorReturn(this, _React$Component.call(this, props));

    _this.state = { offset: 0 };

    _this.getBackProps = function () {
      var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      var onClick = _ref.onClick,
          _ref$offset = _ref.offset,
          offset = _ref$offset === undefined ? 1 : _ref$offset,
          _ref$calendars = _ref.calendars,
          calendars = _ref$calendars === undefined ? requiredProp('getBackProps', 'calendars') : _ref$calendars,
          rest = objectWithoutProperties(_ref, ['onClick', 'offset', 'calendars']);
      var minDate = _this.props.minDate;

      var offsetMonth = _this.getOffset();
      return _extends({
        onClick: composeEventHandlers(onClick, function () {
          _this.onOffsetChanged(offsetMonth - subtractMonth({ calendars: calendars, offset: offset, minDate: minDate }));
        }),
        disabled: isBackDisabled({ calendars: calendars, offset: offset, minDate: minDate }),
        'aria-label': 'Go back ' + offset + ' month' + (offset === 1 ? '' : 's')
      }, rest);
    };

    _this.getForwardProps = function () {
      var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      var onClick = _ref2.onClick,
          _ref2$offset = _ref2.offset,
          offset = _ref2$offset === undefined ? 1 : _ref2$offset,
          _ref2$calendars = _ref2.calendars,
          calendars = _ref2$calendars === undefined ? requiredProp('getForwardProps', 'calendars') : _ref2$calendars,
          rest = objectWithoutProperties(_ref2, ['onClick', 'offset', 'calendars']);
      var maxDate = _this.props.maxDate;

      var offsetMonth = _this.getOffset();
      return _extends({
        onClick: composeEventHandlers(onClick, function () {
          _this.onOffsetChanged(offsetMonth + addMonth({ calendars: calendars, offset: offset, maxDate: maxDate }));
        }),
        disabled: isForwardDisabled({ calendars: calendars, offset: offset, maxDate: maxDate }),
        'aria-label': 'Go forward ' + offset + ' month' + (offset === 1 ? '' : 's')
      }, rest);
    };

    _this.getDateProps = function () {
      var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      var onClick = _ref3.onClick,
          _ref3$dateObj = _ref3.dateObj,
          dateObj = _ref3$dateObj === undefined ? requiredProp('getDateProps', 'dateObj') : _ref3$dateObj,
          rest = objectWithoutProperties(_ref3, ['onClick', 'dateObj']);

      return _extends({
        onClick: composeEventHandlers(onClick, function () {
          _this.props.onDateSelected(dateObj);
        }),
        disabled: !dateObj.selectable,
        'aria-label': dateObj.date.toDateString(),
        'aria-pressed': dateObj.selected,
        role: 'button'
      }, rest);
    };

    _this.getOffset = function () {
      return _this.isOffsetControlled() ? _this.props.offset : _this.state.offset;
    };

    _this.isOffsetControlled = function () {
      return _this.props.offset !== undefined;
    };

    _this.onOffsetChanged = function (newOffset) {
      if (_this.isOffsetControlled()) {
        _this.props.onOffsetChanged(newOffset);
      } else {
        _this.setState({ offset: newOffset }, function () {
          _this.props.onOffsetChanged(newOffset);
        });
      }
    };

    if (process.env.NODE_ENV !== 'production' && typeof props.fillAdjacentMonths !== 'undefined') {
      console.warn('Warning: Dayzed\'s fillAdjacementMonths is deprecated and may be removed in future releases. Please use showOutsideDays instead. It works identically. For more info see https://github.com/deseretdigital/dayzed#showoutsidedays');
    }
    /* eslint-enable */
    return _this;
  }

  /*------------------------- React Component Lifecycle Methods ---*/

  Dayzed.prototype.render = function render() {
    var _props = this.props,
        date = _props.date,
        selected = _props.selected,
        monthsToDisplay = _props.monthsToDisplay,
        minDate = _props.minDate,
        maxDate = _props.maxDate,
        firstDayOfWeek = _props.firstDayOfWeek,
        fillAdjacentMonths = _props.fillAdjacentMonths,
        showOutsideDays = _props.showOutsideDays;

    var calendars = getCalendars({
      date: date,
      selected: selected,
      monthsToDisplay: monthsToDisplay,
      minDate: minDate,
      maxDate: maxDate,
      offset: this.getOffset(),
      firstDayOfWeek: firstDayOfWeek,
      /* TODO: Remove fillAdjacementMonths in next major release */
      showOutsideDays: showOutsideDays || fillAdjacentMonths
    });
    var children = unwrapChildrenForPreact(this.props.render || this.props.children);
    return children({
      calendars: calendars,
      getDateProps: this.getDateProps,
      getBackProps: this.getBackProps,
      getForwardProps: this.getForwardProps
    });
  };

  /*------------------------- Prop Getters ---*/

  /*------------------------- Control Props ---*/

  return Dayzed;
}(React.Component);

Dayzed.defaultProps = {
  date: new Date(),
  monthsToDisplay: 1,
  onOffsetChanged: function onOffsetChanged() {},
  firstDayOfWeek: 0,
  showOutsideDays: false
};

/*
 * Fix importing in typescript after rollup compilation
 * https://github.com/rollup/rollup/issues/1156
 * https://github.com/Microsoft/TypeScript/issues/13017#issuecomment-268657860
 */
Dayzed.default = Dayzed;

module.exports = Dayzed;
