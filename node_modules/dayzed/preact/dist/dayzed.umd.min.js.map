{"version":3,"file":"dayzed.umd.min.js","sources":["../../src/utils.js","../../src/dayzed.js","../../src/index.js"],"sourcesContent":["import addDays from 'date-fns/add_days';\nimport isBefore from 'date-fns/is_before';\nimport isToday from 'date-fns/is_today';\nimport startOfDay from 'date-fns/start_of_day';\nimport differenceInCalendarMonths from 'date-fns/difference_in_calendar_months';\n\n/**\n * This is intended to be used to compose event handlers\n * They are executed in order until one of them calls\n * `event.preventDefault()`. Not sure this is the best\n * way to do this, but it seems legit...\n * @param {Function} fns the event hanlder functions\n * @return {Function} the event handler to add to an element\n */\nexport function composeEventHandlers(...fns) {\n  return (event, ...args) =>\n    fns.some(fn => {\n      fn && fn(event, ...args);\n      return event.defaultPrevented;\n    });\n}\n\n/**\n * Throws a helpful error message for required properties. Useful\n * to be used as a default in destructuring or object params.\n * @param {String} fnName the function name\n * @param {String} propName the prop name\n */\nexport function requiredProp(fnName, propName) {\n  throw new Error(`The property \"${propName}\" is required in \"${fnName}\"`);\n}\n\n/**\n * Takes an argument and if it's an array, returns the first item in the array\n * otherwise returns the argument.\n * @param {*} arg the maybe-array\n * @return {*} the arg or it's first item\n */\nexport function unwrapChildrenForPreact(arg) {\n  arg = Array.isArray(arg) ? /* istanbul ignore next (preact) */ arg[0] : arg;\n  return arg || noop;\n}\nfunction noop() {}\n\n/**\n * Takes a calendars array and figures out the number of months to subtract\n * based on the current offset and the minDate allowed.\n * @param {Object} param The param object\n * @param {Array} param.calendars The calendars array created by the getCalendars function\n * @param {Number} param.offset The num of months to be subtracted\n * @param {Date} param.minDate The earliest date we are allow to subtract back to\n * @returns {Number} The number of months to subtract\n */\nexport function subtractMonth({ calendars, offset, minDate }) {\n  if (offset > 1 && minDate) {\n    const { firstDayOfMonth } = calendars[0];\n    const diffInMonths = differenceInCalendarMonths(firstDayOfMonth, minDate);\n    if (diffInMonths < offset) {\n      offset = diffInMonths;\n    }\n  }\n  return offset;\n}\n\n/**\n * Takes a calendars array and figures out the number of months to add\n * based on the current offset and the maxDate allowed.\n * @param {Object} param The param object\n * @param {Array} param.calendars The calendars array created by the getCalendars function\n * @param {Number} param.offset The num of months to be added\n * @param {Date} param.maxDate The furthest date we are allow to add forward to\n * @returns {Number} The number of months to add\n */\nexport function addMonth({ calendars, offset, maxDate }) {\n  if (offset > 1 && maxDate) {\n    const { lastDayOfMonth } = calendars[calendars.length - 1];\n    const diffInMonths = differenceInCalendarMonths(maxDate, lastDayOfMonth);\n    if (diffInMonths < offset) {\n      offset = diffInMonths;\n    }\n  }\n  return offset;\n}\n\n/**\n * Takes a calendars array and figures out if the back button should be\n * disabled based on the minDate allowed.\n * @param {Object} param The param object\n * @param {Array} param.calendars The calendars array created by the getCalendars function\n * @param {Date} param.minDate The earliest date available\n * @returns {Boolean} Whether the back button should be disabled.\n */\nexport function isBackDisabled({ calendars, minDate }) {\n  if (!minDate) {\n    return false;\n  }\n  const { firstDayOfMonth } = calendars[0];\n  const firstDayOfMonthMinusOne = addDays(firstDayOfMonth, -1);\n  if (isBefore(firstDayOfMonthMinusOne, minDate)) {\n    return true;\n  }\n  return false;\n}\n\n/**\n * Takes a calendars array and figures out if the forward button should be\n * disabled based on the maxDate allowed.\n * @param {Object} param The param object\n * @param {Array} param.calendars The calendars array created by the getCalendars function\n * @param {Date} param.maxDate The furthest date available\n * @returns {Boolean} Whether the forward button should be disabled.\n */\nexport function isForwardDisabled({ calendars, maxDate }) {\n  if (!maxDate) {\n    return false;\n  }\n  const { lastDayOfMonth } = calendars[calendars.length - 1];\n  const lastDayOfMonthPlusOne = addDays(lastDayOfMonth, 1);\n  if (isBefore(maxDate, lastDayOfMonthPlusOne)) {\n    return true;\n  }\n  return false;\n}\n\n/**\n * Figures out the months data needed based off the number of monthsToDisplay\n * and other options provided.\n * @param {Object} param The param object\n * @param {Date} param.date The date to start the calendar at\n * @param {Array.<Date>} param.selected An array of dates currently selected\n * @param {Number} param.monthsToDisplay The number of months to return in the calendar view\n * @param {Number} param.offset The number of months to offset based off the param.date given\n * @param {Date} param.minDate The earliest date available\n * @param {Date} param.maxDate The furthest date available\n * @param {Number} param.firstDayOfWeek First day of week, 0-6 (Sunday to Saturday)\n * @param {Bool} param.showOutsideDays Flag to fill front and back weeks with dates from adjacent months\n * @returns {Array.<Object>} An array of objects with month data\n */\nexport function getCalendars({\n  date,\n  selected,\n  monthsToDisplay,\n  offset,\n  minDate,\n  maxDate,\n  firstDayOfWeek,\n  showOutsideDays\n}) {\n  const months = [];\n  const startDate = getStartDate(date, minDate, maxDate);\n  for (let i = 0; i < monthsToDisplay; i++) {\n    const calendarDates = getMonths({\n      month: startDate.getMonth() + i + offset,\n      year: startDate.getFullYear(),\n      selectedDates: selected,\n      minDate,\n      maxDate,\n      firstDayOfWeek,\n      showOutsideDays\n    });\n    months.push(calendarDates);\n  }\n  return months;\n}\n\n/**\n * Figures out the actual start date based on\n * the min and max dates available.\n * @param {Date} date The we want to start the calendar at\n * @param {Date} minDate The earliest date available to start at\n * @param {Date} maxDate The latest date available to start at\n * @returns {Date} The actual start date\n */\nfunction getStartDate(date, minDate, maxDate) {\n  let startDate = startOfDay(date);\n  if (minDate) {\n    const minDateNormalized = startOfDay(minDate);\n    if (isBefore(startDate, minDateNormalized)) {\n      startDate = minDateNormalized;\n    }\n  }\n  if (maxDate) {\n    const maxDateNormalized = startOfDay(maxDate);\n    if (isBefore(maxDateNormalized, startDate)) {\n      startDate = maxDateNormalized;\n    }\n  }\n  return startDate;\n}\n\n/**\n * Figures what week/day data to return for the given month\n * and year. Adds flags to day data if found in the given selectedDates,\n * if is selectable inside the given min and max dates, or is today.\n * @param {Object} param The param object\n * @param {Number} param.month The month to grab data for\n * @param {Number} param.year The year to grab data for\n * @param {Array.<Date>} sparam.electedDates An array of dates currently selected\n * @param {Date} param.minDate The earliest date available\n * @param {Date} param.maxDate The furthest date available\n * @param {Number} param.firstDayOfWeek First day of week, 0-6 (Sunday to Saturday)\n * @param {Bool} param.showOutsideDays Flag to fill front and back weeks with dates from adjacent months\n * @returns {Object} The data for the selected month/year\n */\nfunction getMonths({\n  month,\n  year,\n  selectedDates,\n  minDate,\n  maxDate,\n  firstDayOfWeek,\n  showOutsideDays\n}) {\n  // Get the normalized month and year, along with days in the month.\n  const daysMonthYear = getNumDaysMonthYear(month, year);\n  const daysInMonth = daysMonthYear.daysInMonth;\n  month = daysMonthYear.month;\n  year = daysMonthYear.year;\n\n  // Fill out the dates for the month.\n  const dates = [];\n  for (let day = 1; day <= daysInMonth; day++) {\n    const date = new Date(year, month, day);\n    const dateObj = {\n      date,\n      selected: isSelected(selectedDates, date),\n      selectable: isSelectable(minDate, maxDate, date),\n      today: isToday(date),\n      prevMonth: false,\n      nextMonth: false\n    };\n    dates.push(dateObj);\n  }\n\n  const firstDayOfMonth = new Date(year, month, 1);\n  const lastDayOfMonth = new Date(year, month, daysInMonth);\n\n  const frontWeekBuffer = fillFrontWeek({\n    firstDayOfMonth,\n    minDate,\n    maxDate,\n    selectedDates,\n    firstDayOfWeek,\n    showOutsideDays\n  });\n\n  const backWeekBuffer = fillBackWeek({\n    lastDayOfMonth,\n    minDate,\n    maxDate,\n    selectedDates,\n    firstDayOfWeek,\n    showOutsideDays\n  });\n\n  dates.unshift(...frontWeekBuffer);\n  dates.push(...backWeekBuffer);\n\n  // Get the filled out weeks for the\n  // given dates.\n  const weeks = getWeeks(dates);\n  // return the calendar data.\n  return {\n    firstDayOfMonth,\n    lastDayOfMonth,\n    month,\n    year,\n    weeks\n  };\n}\n\n/**\n * Fill front week with either empty buffer or dates from previous month,\n * depending on showOutsideDays flag\n * @param {Object} param The param object\n * @param {Array.<Date>} param.selectedDates An array of dates currently selected\n * @param {Date} param.minDate The earliest date available\n * @param {Date} param.maxDate The furthest date available\n * @param {Date} param.firstDayOfMonth First day of the month\n * @param {Number} param.firstDayOfWeek First day of week, 0-6 (Sunday to Saturday)\n * @param {Bool} param.showOutsideDays Flag to fill front and back weeks with dates from adjacent months\n * @returns {Array.<Date>} Buffer to fill front week\n */\nfunction fillFrontWeek({\n  firstDayOfMonth,\n  minDate,\n  maxDate,\n  selectedDates,\n  firstDayOfWeek,\n  showOutsideDays\n}) {\n  const dates = [];\n  let firstDay = (firstDayOfMonth.getDay() + 7 - firstDayOfWeek) % 7;\n\n  if (showOutsideDays) {\n    const lastDayOfPrevMonth = addDays(firstDayOfMonth, -1);\n    const prevDate = lastDayOfPrevMonth.getDate();\n    const prevDateMonth = lastDayOfPrevMonth.getMonth();\n    const prevDateYear = lastDayOfPrevMonth.getFullYear();\n\n    // Fill out front week for days from\n    // preceding month with dates from previous month.\n    let counter = 0;\n    while (counter < firstDay) {\n      const date = new Date(prevDateYear, prevDateMonth, prevDate - counter);\n      const dateObj = {\n        date,\n        selected: isSelected(selectedDates, date),\n        selectable: isSelectable(minDate, maxDate, date),\n        today: false,\n        prevMonth: true,\n        nextMonth: false\n      };\n      dates.unshift(dateObj);\n      counter++;\n    }\n  } else {\n    // Fill out front week for days from\n    // preceding month with buffer.\n    while (firstDay > 0) {\n      dates.unshift('');\n      firstDay--;\n    }\n  }\n\n  return dates;\n}\n\n/**\n * Fill back weeks with either empty buffer or dates from next month,\n * depending on showOutsideDays flag\n * @param {Object} param The param object\n * @param {Array.<Date>} param.selectedDates An array of dates currently selected\n * @param {Date} param.minDate The earliest date available\n * @param {Date} param.maxDate The furthest date available\n * @param {Date} param.lastDayOfMonth Last day of the month\n * @param {Number} param.firstDayOfWeek First day of week, 0-6 (Sunday to Saturday)\n * @param {Bool} param.showOutsideDays Flag to fill front and back weeks with dates from adjacent months\n * @returns {Array.<Date>} Buffer to fill back week\n */\nfunction fillBackWeek({\n  lastDayOfMonth,\n  minDate,\n  maxDate,\n  selectedDates,\n  firstDayOfWeek,\n  showOutsideDays\n}) {\n  const dates = [];\n  let lastDay = (lastDayOfMonth.getDay() + 7 - firstDayOfWeek) % 7;\n\n  if (showOutsideDays) {\n    const firstDayOfNextMonth = addDays(lastDayOfMonth, 1);\n    const nextDateMonth = firstDayOfNextMonth.getMonth();\n    const nextDateYear = firstDayOfNextMonth.getFullYear();\n\n    // Fill out back week for days from\n    // following month with dates from next month.\n    let counter = 0;\n    while (counter < 6 - lastDay) {\n      const date = new Date(nextDateYear, nextDateMonth, 1 + counter);\n      const dateObj = {\n        date,\n        selected: isSelected(selectedDates, date),\n        selectable: isSelectable(minDate, maxDate, date),\n        today: false,\n        prevMonth: false,\n        nextMonth: true\n      };\n      dates.push(dateObj);\n      counter++;\n    }\n  } else {\n    // Fill out back week for days from\n    // following month with buffer.\n    while (lastDay < 6) {\n      dates.push('');\n      lastDay++;\n    }\n  }\n\n  return dates;\n}\n\n/**\n * Normalizes month (could be overflow) and year pairs and returns the\n * normalized month and year along with the number of days in the month.\n * @param {Number} month The month to normalize\n * @param {Number} year The year to normalize\n * @returns {Object} The normalized month and year along with the number of days in the month\n */\nfunction getNumDaysMonthYear(month, year) {\n  // If a parameter you specify is outside of the expected range for Month or Day,\n  // JS Date attempts to update the date information in the Date object accordingly!\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setMonth\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setDate\n\n  // Let Date handle the overflow of the month,\n  // which should return the normalized month and year.\n  const normalizedMonthYear = new Date(year, month, 1);\n  month = normalizedMonthYear.getMonth();\n  year = normalizedMonthYear.getFullYear();\n  // Overflow the date to the next month, then subtract the difference\n  // to get the number of days in the previous month.\n  // This will also account for leap years!\n  const daysInMonth = 32 - new Date(year, month, 32).getDate();\n  return { daysInMonth, month, year };\n}\n\n/**\n * Takes an array of dates, and turns them into a multi dimensional\n * array with 7 entries for each week.\n * @param {Array.<Object>} dates An array of dates\n * @returns {Array} The weeks as a multi dimensional array\n */\nfunction getWeeks(dates) {\n  const weeksLength = Math.ceil(dates.length / 7);\n  const weeks = [];\n  for (let i = 0; i < weeksLength; i++) {\n    weeks[i] = [];\n    for (let x = 0; x < 7; x++) {\n      weeks[i].push(dates[i * 7 + x]);\n    }\n  }\n  return weeks;\n}\n\n/**\n * Normalizes dates to the beginning of the day,\n * then checks to see if the day given is found\n * in the selectedDates.\n * @param {Array.<Date>} selectedDates An array of dates currently selected\n * @param {Date} date The date to search with against selectedDates\n * @returns {Boolean} Whether day is found in selectedDates\n */\nfunction isSelected(selectedDates, date) {\n  selectedDates = Array.isArray(selectedDates)\n    ? selectedDates\n    : [selectedDates];\n  return selectedDates.some(selectedDate => {\n    if (\n      selectedDate instanceof Date &&\n      startOfDay(selectedDate).getTime() === startOfDay(date).getTime()\n    ) {\n      return true;\n    }\n    return false;\n  });\n}\n\n/**\n * Checks to see if the date given is\n * between the min and max dates.\n * @param {Date} minDate The earliest date available\n * @param {Date} maxDate The furthest date available\n * @param {Date} date The date to compare with\n * @returns {Boolean} Whether the date is between min and max date\n */\nfunction isSelectable(minDate, maxDate, date) {\n  if (\n    (minDate && isBefore(date, minDate)) ||\n    (maxDate && isBefore(maxDate, date))\n  ) {\n    return false;\n  }\n  return true;\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {\n  composeEventHandlers,\n  requiredProp,\n  unwrapChildrenForPreact,\n  subtractMonth,\n  addMonth,\n  isBackDisabled,\n  isForwardDisabled,\n  getCalendars\n} from './utils';\n\nclass Dayzed extends React.Component {\n  state = { offset: 0 };\n\n  /* TODO: Remove this block in next major release */\n  constructor(props) {\n    super(props);\n    /* eslint-disable */\n    if (\n      process.env.NODE_ENV !== 'production' &&\n      typeof props.fillAdjacentMonths !== 'undefined'\n    ) {\n      console.warn(\n        `Warning: Dayzed's fillAdjacementMonths is deprecated and may be removed in future releases. Please use showOutsideDays instead. It works identically. For more info see https://github.com/deseretdigital/dayzed#showoutsidedays`\n      );\n    }\n    /* eslint-enable */\n  }\n\n  /*------------------------- React Component Lifecycle Methods ---*/\n\n  render() {\n    const {\n      date,\n      selected,\n      monthsToDisplay,\n      minDate,\n      maxDate,\n      firstDayOfWeek,\n      fillAdjacentMonths,\n      showOutsideDays\n    } = this.props;\n    const calendars = getCalendars({\n      date,\n      selected,\n      monthsToDisplay,\n      minDate,\n      maxDate,\n      offset: this.getOffset(),\n      firstDayOfWeek,\n      /* TODO: Remove fillAdjacementMonths in next major release */\n      showOutsideDays: showOutsideDays || fillAdjacentMonths\n    });\n    const children = unwrapChildrenForPreact(\n      this.props.render || this.props.children\n    );\n    return children({\n      calendars,\n      getDateProps: this.getDateProps,\n      getBackProps: this.getBackProps,\n      getForwardProps: this.getForwardProps\n    });\n  }\n\n  /*------------------------- Prop Getters ---*/\n\n  getBackProps = ({\n    onClick,\n    offset = 1,\n    calendars = requiredProp('getBackProps', 'calendars'),\n    ...rest\n  } = {}) => {\n    const { minDate } = this.props;\n    const offsetMonth = this.getOffset();\n    return {\n      onClick: composeEventHandlers(onClick, () => {\n        this.onOffsetChanged(\n          offsetMonth - subtractMonth({ calendars, offset, minDate })\n        );\n      }),\n      disabled: isBackDisabled({ calendars, offset, minDate }),\n      'aria-label': `Go back ${offset} month${offset === 1 ? '' : 's'}`,\n      ...rest\n    };\n  };\n\n  getForwardProps = ({\n    onClick,\n    offset = 1,\n    calendars = requiredProp('getForwardProps', 'calendars'),\n    ...rest\n  } = {}) => {\n    const { maxDate } = this.props;\n    const offsetMonth = this.getOffset();\n    return {\n      onClick: composeEventHandlers(onClick, () => {\n        this.onOffsetChanged(\n          offsetMonth + addMonth({ calendars, offset, maxDate })\n        );\n      }),\n      disabled: isForwardDisabled({ calendars, offset, maxDate }),\n      'aria-label': `Go forward ${offset} month${offset === 1 ? '' : 's'}`,\n      ...rest\n    };\n  };\n\n  getDateProps = ({\n    onClick,\n    dateObj = requiredProp('getDateProps', 'dateObj'),\n    ...rest\n  } = {}) => {\n    return {\n      onClick: composeEventHandlers(onClick, () => {\n        this.props.onDateSelected(dateObj);\n      }),\n      disabled: !dateObj.selectable,\n      'aria-label': dateObj.date.toDateString(),\n      'aria-pressed': dateObj.selected,\n      role: 'button',\n      ...rest\n    };\n  };\n\n  /*------------------------- Control Props ---*/\n\n  getOffset = () => {\n    return this.isOffsetControlled() ? this.props.offset : this.state.offset;\n  };\n\n  isOffsetControlled = () => {\n    return this.props.offset !== undefined;\n  };\n\n  onOffsetChanged = newOffset => {\n    if (this.isOffsetControlled()) {\n      this.props.onOffsetChanged(newOffset);\n    } else {\n      this.setState({ offset: newOffset }, () => {\n        this.props.onOffsetChanged(newOffset);\n      });\n    }\n  };\n}\n\nDayzed.defaultProps = {\n  date: new Date(),\n  monthsToDisplay: 1,\n  onOffsetChanged: () => {},\n  firstDayOfWeek: 0,\n  showOutsideDays: false\n};\n\nDayzed.propTypes = {\n  render: PropTypes.func,\n  children: PropTypes.func,\n  date: PropTypes.instanceOf(Date),\n  maxDate: PropTypes.instanceOf(Date),\n  minDate: PropTypes.instanceOf(Date),\n  monthsToDisplay: PropTypes.number,\n  firstDayOfWeek: PropTypes.number,\n  showOutsideDays: PropTypes.bool,\n  /* TODO: Remove fillAdjacementMonths in next major release */\n  fillAdjacentMonths: PropTypes.bool,\n  offset: PropTypes.number,\n  onDateSelected: PropTypes.func.isRequired,\n  onOffsetChanged: PropTypes.func,\n  selected: PropTypes.oneOfType([\n    PropTypes.arrayOf(Date),\n    PropTypes.instanceOf(Date)\n  ])\n};\n\nexport default Dayzed;\n","import Dayzed from './dayzed';\n\n/*\n * Fix importing in typescript after rollup compilation\n * https://github.com/rollup/rollup/issues/1156\n * https://github.com/Microsoft/TypeScript/issues/13017#issuecomment-268657860\n */\nDayzed.default = Dayzed;\n\nexport default Dayzed;\n"],"names":["composeEventHandlers","fns","event","args","some","fn","defaultPrevented","requiredProp","fnName","propName","Error","noop","getCalendars","date","selected","monthsToDisplay","offset","minDate","maxDate","firstDayOfWeek","showOutsideDays","months","startDate","startOfDay","minDateNormalized","isBefore","maxDateNormalized","getStartDate","i","calendarDates","getMonths","getMonth","getFullYear","push","month","year","selectedDates","daysMonthYear","normalizedMonthYear","Date","daysInMonth","getDate","getNumDaysMonthYear","dates","day","dateObj","isSelected","isSelectable","isToday","firstDayOfMonth","lastDayOfMonth","frontWeekBuffer","firstDay","getDay","lastDayOfPrevMonth","addDays","prevDate","prevDateMonth","prevDateYear","counter","unshift","fillFrontWeek","backWeekBuffer","lastDay","firstDayOfNextMonth","nextDateMonth","nextDateYear","fillBackWeek","weeksLength","Math","ceil","length","weeks","x","getWeeks","Array","isArray","selectedDate","getTime","Dayzed","props","_React$Component","state","getBackProps","onClick","calendars","rest","_this","offsetMonth","getOffset","onOffsetChanged","diffInMonths","differenceInCalendarMonths","subtractMonth","firstDayOfMonthMinusOne","isBackDisabled","getForwardProps","addMonth","lastDayOfMonthPlusOne","isForwardDisabled","getDateProps","onDateSelected","selectable","toDateString","isOffsetControlled","undefined","newOffset","setState","render","arg","this","fillAdjacentMonths","children","React","Component","defaultProps","default"],"mappings":"2nBAcO,SAASA,+BAAwBC,gDAC/B,SAACC,8BAAUC,0DAChBF,EAAIG,KAAK,sBACDC,gBAAGH,UAAUC,IACZD,EAAMI,oBAUZ,SAASC,EAAaC,EAAQC,SAC7B,IAAIC,uBAAuBD,uBAA6BD,OAahE,SAASG,KAgGF,SAASC,aACdC,IAAAA,KACAC,IAAAA,SACAC,IAAAA,gBACAC,IAAAA,OACAC,IAAAA,QACAC,IAAAA,QACAC,IAAAA,eACAC,IAAAA,gBAEMC,KACAC,EAwBR,SAAsBT,EAAMI,EAASC,OAC/BI,EAAYC,EAAWV,MACvBI,EAAS,KACLO,EAAoBD,EAAWN,GACjCQ,EAASH,EAAWE,OACVA,MAGZN,EAAS,KACLQ,EAAoBH,EAAWL,GACjCO,EAASC,EAAmBJ,OAClBI,UAGTJ,EAtCWK,CAAad,EAAMI,EAASC,GACrCU,EAAI,EAAGA,EAAIb,EAAiBa,IAAK,KAClCC,EAAgBC,SACbR,EAAUS,WAAaH,EAAIZ,OAC5BM,EAAUU,4BACDlB,6DAMVmB,KAAKJ,UAEPR,EA0CT,SAASS,SACPI,IAAAA,MACAC,IAAAA,KACAC,IAAAA,cACAnB,IAAAA,QACAC,IAAAA,QACAC,IAAAA,eACAC,IAAAA,gBAGMiB,EAiLR,SAA6BH,EAAOC,OAQ5BG,EAAsB,IAAIC,KAAKJ,EAAMD,EAAO,YAC1CI,EAAoBP,aACrBO,EAAoBN,eAKlBQ,YADW,GAAK,IAAID,KAAKJ,EAAMD,EAAO,IAAIO,UAC7BP,QAAOC,QAhMPO,CAAoBR,EAAOC,GAC3CK,EAAcH,EAAcG,cAC1BH,EAAcH,QACfG,EAAcF,aAGfQ,KACGC,EAAM,EAAGA,GAAOJ,EAAaI,IAAO,KACrC/B,EAAO,IAAI0B,KAAKJ,EAAMD,EAAOU,GAC7BC,mBAEMC,EAAWV,EAAevB,cACxBkC,EAAa9B,EAASC,EAASL,SACpCmC,EAAQnC,cACJ,aACA,KAEPoB,KAAKY,OAGPI,EAAkB,IAAIV,KAAKJ,EAAMD,EAAO,GACxCgB,EAAiB,IAAIX,KAAKJ,EAAMD,EAAOM,GAEvCW,EA8CR,gBACEF,IAAAA,gBACAhC,IAAAA,QACAC,IAAAA,QACAkB,IAAAA,cACAjB,IAAAA,eACAC,IAAAA,gBAEMuB,KACFS,GAAYH,EAAgBI,SAAW,EAAIlC,GAAkB,KAE7DC,UACIkC,EAAqBC,EAAQN,GAAkB,GAC/CO,EAAWF,EAAmBb,UAC9BgB,EAAgBH,EAAmBvB,WACnC2B,EAAeJ,EAAmBtB,cAIpC2B,EAAU,EACPA,EAAUP,GAAU,KACnBvC,EAAO,IAAI0B,KAAKmB,EAAcD,EAAeD,EAAWG,GACxDd,mBAEMC,EAAWV,EAAevB,cACxBkC,EAAa9B,EAASC,EAASL,UACpC,aACI,aACA,KAEP+C,QAAQf,iBAMTO,EAAW,KACVQ,QAAQ,eAKXjB,EAxFiBkB,6FASlBC,EA8FR,gBACEZ,IAAAA,eACAjC,IAAAA,QACAC,IAAAA,QACAkB,IAAAA,cACAjB,IAAAA,eACAC,IAAAA,gBAEMuB,KACFoB,GAAWb,EAAeG,SAAW,EAAIlC,GAAkB,KAE3DC,UACI4C,EAAsBT,EAAQL,EAAgB,GAC9Ce,EAAgBD,EAAoBjC,WACpCmC,EAAeF,EAAoBhC,cAIrC2B,EAAU,EACPA,EAAU,EAAII,GAAS,KACtBlD,EAAO,IAAI0B,KAAK2B,EAAcD,EAAe,EAAIN,GACjDd,mBAEMC,EAAWV,EAAevB,cACxBkC,EAAa9B,EAASC,EAASL,UACpC,aACI,aACA,KAEPoB,KAAKY,iBAMNkB,EAAU,KACT9B,KAAK,eAKRU,EAvIgBwB,qGASjBP,gBAAWT,KACXlB,aAAQ6B,4DA+JhB,SAAkBnB,WACVyB,EAAcC,KAAKC,KAAK3B,EAAM4B,OAAS,GACvCC,KACG5C,EAAI,EAAGA,EAAIwC,EAAaxC,IAAK,GAC9BA,UACD,IAAI6C,EAAI,EAAGA,EAAI,EAAGA,MACf7C,GAAGK,KAAKU,EAAU,EAAJf,EAAQ6C,WAGzBD,EApKOE,CAAS/B,IA+KzB,SAASG,EAAWV,EAAevB,YACjB8D,MAAMC,QAAQxC,GAC1BA,GACCA,IACgBhC,KAAK,mBAEtByE,aAAwBtC,MACxBhB,EAAWsD,GAAcC,YAAcvD,EAAWV,GAAMiE,YAgB9D,SAAS/B,EAAa9B,EAASC,EAASL,WAEnCI,GAAWQ,EAASZ,EAAMI,IAC1BC,GAAWO,EAASP,EAASL,uzBC/b5BkE,yBAIQC,0BACVC,YAAMD,aAJRE,OAAUlE,OAAQ,KAsDlBmE,aAAe,2EACbC,IAAAA,YACApE,OAAAA,aAAS,QACTqE,UAAAA,aAAY9E,EAAa,eAAgB,eACtC+E,wCAEKrE,EAAYsE,EAAKP,MAAjB/D,QACFuE,EAAcD,EAAKE,8BAEdzF,EAAqBoF,EAAS,aAChCM,gBACHF,ED3BH,gBAAyBH,IAAAA,UAAWrE,IAAAA,OAAQC,IAAAA,WAC7CD,EAAS,GAAKC,EAAS,KACjBgC,EAAoBoC,EAAU,GAA9BpC,gBACF0C,EAAeC,EAA2B3C,EAAiBhC,GAC7D0E,EAAe3E,MACR2E,UAGN3E,ECmBe6E,EAAgBR,YAAWrE,SAAQC,wBDYpD,gBAA0BoE,IAAAA,UAAWpE,IAAAA,YACrCA,SACI,MAEDgC,EAAoBoC,EAAU,GAA9BpC,gBACF6C,EAA0BvC,EAAQN,GAAkB,WACtDxB,EAASqE,EAAyB7E,GCfxB8E,EAAiBV,YAAWrE,SAAQC,oCACrBD,YAA0B,IAAXA,EAAe,GAAK,MACzDsE,MAIPU,gBAAkB,2EAChBZ,IAAAA,YACApE,OAAAA,aAAS,QACTqE,UAAAA,aAAY9E,EAAa,kBAAmB,eACzC+E,wCAEKpE,EAAYqE,EAAKP,MAAjB9D,QACFsE,EAAcD,EAAKE,8BAEdzF,EAAqBoF,EAAS,aAChCM,gBACHF,ED3BH,gBAAoBH,IAAAA,UAAWrE,IAAAA,OAAQE,IAAAA,WACxCF,EAAS,GAAKE,EAAS,KACjBgC,EAAmBmC,EAAUA,EAAUd,OAAS,GAAhDrB,eACFyC,EAAeC,EAA2B1E,EAASgC,GACrDyC,EAAe3E,MACR2E,UAGN3E,ECmBeiF,EAAWZ,YAAWrE,SAAQE,wBDY/C,gBAA6BmE,IAAAA,UAAWnE,IAAAA,YACxCA,SACI,MAEDgC,EAAmBmC,EAAUA,EAAUd,OAAS,GAAhDrB,eACFgD,EAAwB3C,EAAQL,EAAgB,WAClDzB,EAASP,EAASgF,GCfRC,EAAoBd,YAAWrE,SAAQE,uCACrBF,YAA0B,IAAXA,EAAe,GAAK,MAC5DsE,MAIPc,aAAe,2EACbhB,IAAAA,YACAvC,QAAAA,aAAUtC,EAAa,eAAgB,aACpC+E,+CAGQtF,EAAqBoF,EAAS,aAChCJ,MAAMqB,eAAexD,eAEjBA,EAAQyD,wBACLzD,EAAQhC,KAAK0F,8BACX1D,EAAQ/B,cAClB,UACHwE,MAMPG,UAAY,kBACHF,EAAKiB,qBAAuBjB,EAAKP,MAAMhE,OAASuE,EAAKL,MAAMlE,UAGpEwF,mBAAqB,uBACUC,IAAtBlB,EAAKP,MAAMhE,UAGpB0E,gBAAkB,YACZH,EAAKiB,uBACFxB,MAAMU,gBAAgBgB,KAEtBC,UAAW3F,OAAQ0F,GAAa,aAC9B1B,MAAMU,gBAAgBgB,0VA3GjCE,sBDIsCC,ICMhCC,KAAK9B,MARPnE,IAAAA,KACAC,IAAAA,SACAC,IAAAA,gBACAE,IAAAA,QACAC,IAAAA,QACAC,IAAAA,eACA4F,IAAAA,mBACA3F,IAAAA,gBAEIiE,EAAYzE,kEAMRkG,KAAKrB,6CAGIrE,GAAmB2F,WDhBFF,ECmBlCC,KAAK9B,MAAM4B,QAAUE,KAAK9B,MAAMgC,YDlB9BrC,MAAMC,QAAQiC,GAA2CA,EAAI,GAAKA,IAC1DlG,6BCqBImG,KAAKV,0BACLU,KAAK3B,6BACF2B,KAAKd,sBAjDPiB,EAAMC,kBAqI3BnC,EAAOoC,mBACC,IAAI5E,qBACO,kBACA,4BACD,mBACC,GCjJnBwC,EAAOqC,QAAUrC"}