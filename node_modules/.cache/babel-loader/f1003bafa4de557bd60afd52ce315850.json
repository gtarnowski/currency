{"ast":null,"code":"import MathJS from 'mathjs';\nimport get from 'lodash/get';\nimport map from 'lodash/map';\nexport default class Converter {\n  constructor() {\n    this.amount = '';\n    this.from = '';\n    this.rate = 0;\n    this.result = 0;\n    this.to = '';\n  }\n\n  static ComposeConverterData({\n    response,\n    amount\n  }) {\n    const results = get(response, 'data.results');\n\n    if (results) {\n      return map(results, ({\n        fr: from,\n        to,\n        val: rate\n      }) => Converter.CreateConverter({\n        from,\n        to,\n        rate,\n        amount\n      }));\n    }\n\n    return [];\n  }\n\n  static CreateConverter(data) {\n    const from = data.from,\n          to = data.to,\n          rate = data.rate,\n          amount = data.amount;\n    const convertModel = new Converter();\n    convertModel.rate = rate;\n    convertModel.amount = amount;\n    convertModel.from = from;\n    convertModel.to = to;\n    convertModel.result = Converter.CalculateConversionResult({\n      rate,\n      amount\n    });\n    return convertModel;\n  }\n\n  static CalculateConversionResult({\n    rate,\n    amount\n  }) {\n    return MathJS.round(MathJS.multiply(rate, amount), 5);\n  }\n\n}","map":{"version":3,"sources":["/home/hexen/Work/currency/src/api/converterModel.js"],"names":["MathJS","get","map","Converter","constructor","amount","from","rate","result","to","ComposeConverterData","response","results","fr","val","CreateConverter","data","convertModel","CalculateConversionResult","round","multiply"],"mappings":"AACA,OAAOA,MAAP,MAAmB,QAAnB;AACA,OAAOC,GAAP,MAAgB,YAAhB;AACA,OAAOC,GAAP,MAAgB,YAAhB;AAcA,eAAe,MAAMC,SAAN,CAAgB;AAO7BC,EAAAA,WAAW,GAAG;AACZ,SAAKC,MAAL,GAAc,EAAd;AACA,SAAKC,IAAL,GAAY,EAAZ;AACA,SAAKC,IAAL,GAAY,CAAZ;AACA,SAAKC,MAAL,GAAc,CAAd;AACA,SAAKC,EAAL,GAAU,EAAV;AACD;;AAED,SAAOC,oBAAP,CAA4B;AAAEC,IAAAA,QAAF;AAAYN,IAAAA;AAAZ,GAA5B,EAAuD;AACrD,UAAMO,OAAO,GAAGX,GAAG,CAACU,QAAD,EAAW,cAAX,CAAnB;;AACA,QAAIC,OAAJ,EAAa;AACX,aAAOV,GAAG,CAACU,OAAD,EAAU,CAAC;AAAEC,QAAAA,EAAE,EAAEP,IAAN;AAAYG,QAAAA,EAAZ;AAAgBK,QAAAA,GAAG,EAAEP;AAArB,OAAD,KAClBJ,SAAS,CAACY,eAAV,CAA0B;AAAET,QAAAA,IAAF;AAAQG,QAAAA,EAAR;AAAYF,QAAAA,IAAZ;AAAkBF,QAAAA;AAAlB,OAA1B,CADQ,CAAV;AAGD;;AACD,WAAO,EAAP;AACD;;AAED,SAAOU,eAAP,CAAuBC,IAAvB,EAAyC;AAAA,UAC/BV,IAD+B,GACJU,IADI,CAC/BV,IAD+B;AAAA,UACzBG,EADyB,GACJO,IADI,CACzBP,EADyB;AAAA,UACrBF,IADqB,GACJS,IADI,CACrBT,IADqB;AAAA,UACfF,MADe,GACJW,IADI,CACfX,MADe;AAEvC,UAAMY,YAAY,GAAG,IAAId,SAAJ,EAArB;AACAc,IAAAA,YAAY,CAACV,IAAb,GAAoBA,IAApB;AACAU,IAAAA,YAAY,CAACZ,MAAb,GAAsBA,MAAtB;AACAY,IAAAA,YAAY,CAACX,IAAb,GAAoBA,IAApB;AACAW,IAAAA,YAAY,CAACR,EAAb,GAAkBA,EAAlB;AACAQ,IAAAA,YAAY,CAACT,MAAb,GAAsBL,SAAS,CAACe,yBAAV,CAAoC;AAAEX,MAAAA,IAAF;AAAQF,MAAAA;AAAR,KAApC,CAAtB;AACA,WAAOY,YAAP;AACD;;AAED,SAAOC,yBAAP,CAAiC;AAAEX,IAAAA,IAAF;AAAQF,IAAAA;AAAR,GAAjC,EAAmE;AACjE,WAAOL,MAAM,CAACmB,KAAP,CAAanB,MAAM,CAACoB,QAAP,CAAgBb,IAAhB,EAAsBF,MAAtB,CAAb,EAA4C,CAA5C,CAAP;AACD;;AAtC4B","sourcesContent":["// @flow\nimport MathJS from 'mathjs'\nimport get from 'lodash/get'\nimport map from 'lodash/map'\n\ninterface CreateType {\n  amount: string;\n  rate: number;\n  from: string;\n  to: string;\n}\n\ninterface RateAmountType {\n  amount: string;\n  rate: number;\n}\n\nexport default class Converter {\n  amount: string\n  from: string\n  rate: number\n  result: number\n  to: string\n\n  constructor() {\n    this.amount = ''\n    this.from = ''\n    this.rate = 0\n    this.result = 0\n    this.to = ''\n  }\n\n  static ComposeConverterData({ response, amount }: any) {\n    const results = get(response, 'data.results')\n    if (results) {\n      return map(results, ({ fr: from, to, val: rate }) =>\n        Converter.CreateConverter({ from, to, rate, amount })\n      )\n    }\n    return []\n  }\n\n  static CreateConverter(data: CreateType) {\n    const { from, to, rate, amount } = data\n    const convertModel = new Converter()\n    convertModel.rate = rate\n    convertModel.amount = amount\n    convertModel.from = from\n    convertModel.to = to\n    convertModel.result = Converter.CalculateConversionResult({ rate, amount })\n    return convertModel\n  }\n\n  static CalculateConversionResult({ rate, amount }: RateAmountType) {\n    return MathJS.round(MathJS.multiply(rate, amount), 5)\n  }\n}\n"]},"metadata":{},"sourceType":"module"}