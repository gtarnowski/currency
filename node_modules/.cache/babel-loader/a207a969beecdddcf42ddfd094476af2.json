{"ast":null,"code":"import { call, takeLatest, put, select } from 'redux-saga/effects';\nimport { converterConvert, converterSetConvertResult } from './actions';\nimport { makeSelectFromCurrency, makeSelectToCurrency, makeSelectAmount } from './selectors';\nimport apiRequest from '../../lib/apiRequest';\nimport { CONVERT_ENDPOINT_PATH } from '../../constants/endpoints';\nimport Converter from '../../api/converterModel';\nimport { composeCurrenciesQuery } from '../../lib/currency';\nconst API_KEY = process.env.REACT_APP_API_KEY_CURRCONV;\nexport function* convertCurrencySaga() {\n  const selectFromCurrency = yield call(makeSelectFromCurrency);\n  const fromCurrency = yield select(selectFromCurrency);\n  const selectToCurrency = yield call(makeSelectToCurrency);\n  const toCurrency = yield select(selectToCurrency);\n  const selectAmount = yield call(makeSelectAmount);\n  const amount = yield select(selectAmount);\n\n  try {\n    const response = yield call(apiRequest, CONVERT_ENDPOINT_PATH, {\n      apiKey: API_KEY,\n      q: composeCurrenciesQuery(fromCurrency, toCurrency)\n    });\n    const data = Converter.ComposeConverterData({\n      response,\n      amount\n    });\n    yield put(converterSetConvertResult(data));\n  } catch (e) {\n    console.log(e);\n  }\n}\nexport default function* defaultSaga() {\n  yield takeLatest(converterConvert, convertCurrencySaga);\n}","map":{"version":3,"sources":["/home/hexen/Work/currency/src/containers/Converter/saga.js"],"names":["call","takeLatest","put","select","converterConvert","converterSetConvertResult","makeSelectFromCurrency","makeSelectToCurrency","makeSelectAmount","apiRequest","CONVERT_ENDPOINT_PATH","Converter","composeCurrenciesQuery","API_KEY","process","env","REACT_APP_API_KEY_CURRCONV","convertCurrencySaga","selectFromCurrency","fromCurrency","selectToCurrency","toCurrency","selectAmount","amount","response","apiKey","q","data","ComposeConverterData","e","console","log","defaultSaga"],"mappings":"AAAA,SAASA,IAAT,EAAeC,UAAf,EAA2BC,GAA3B,EAAgCC,MAAhC,QAA8C,oBAA9C;AACA,SAASC,gBAAT,EAA2BC,yBAA3B,QAA4D,WAA5D;AACA,SACEC,sBADF,EAEEC,oBAFF,EAGEC,gBAHF,QAIO,aAJP;AAKA,OAAOC,UAAP,MAAuB,sBAAvB;AACA,SAASC,qBAAT,QAAsC,2BAAtC;AACA,OAAOC,SAAP,MAAsB,0BAAtB;AACA,SAASC,sBAAT,QAAuC,oBAAvC;AAEA,MAAMC,OAAO,GAAGC,OAAO,CAACC,GAAR,CAAYC,0BAA5B;AAEA,OAAO,UAAUC,mBAAV,GAAgC;AACrC,QAAMC,kBAAkB,GAAG,MAAMlB,IAAI,CAACM,sBAAD,CAArC;AACA,QAAMa,YAAY,GAAG,MAAMhB,MAAM,CAACe,kBAAD,CAAjC;AACA,QAAME,gBAAgB,GAAG,MAAMpB,IAAI,CAACO,oBAAD,CAAnC;AACA,QAAMc,UAAU,GAAG,MAAMlB,MAAM,CAACiB,gBAAD,CAA/B;AACA,QAAME,YAAY,GAAG,MAAMtB,IAAI,CAACQ,gBAAD,CAA/B;AACA,QAAMe,MAAM,GAAG,MAAMpB,MAAM,CAACmB,YAAD,CAA3B;;AACA,MAAI;AACF,UAAME,QAAQ,GAAG,MAAMxB,IAAI,CAACS,UAAD,EAAaC,qBAAb,EAAoC;AAC7De,MAAAA,MAAM,EAAEZ,OADqD;AAE7Da,MAAAA,CAAC,EAAEd,sBAAsB,CAACO,YAAD,EAAeE,UAAf;AAFoC,KAApC,CAA3B;AAIA,UAAMM,IAAI,GAAGhB,SAAS,CAACiB,oBAAV,CAA+B;AAAEJ,MAAAA,QAAF;AAAYD,MAAAA;AAAZ,KAA/B,CAAb;AACA,UAAMrB,GAAG,CAACG,yBAAyB,CAACsB,IAAD,CAA1B,CAAT;AACD,GAPD,CAOE,OAAOE,CAAP,EAAU;AACVC,IAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACD;AACF;AAED,eAAe,UAAUG,WAAV,GAAwB;AACrC,QAAM/B,UAAU,CAACG,gBAAD,EAAmBa,mBAAnB,CAAhB;AACD","sourcesContent":["import { call, takeLatest, put, select } from 'redux-saga/effects'\nimport { converterConvert, converterSetConvertResult } from './actions'\nimport {\n  makeSelectFromCurrency,\n  makeSelectToCurrency,\n  makeSelectAmount\n} from './selectors'\nimport apiRequest from '../../lib/apiRequest'\nimport { CONVERT_ENDPOINT_PATH } from '../../constants/endpoints'\nimport Converter from '../../api/converterModel'\nimport { composeCurrenciesQuery } from '../../lib/currency'\n\nconst API_KEY = process.env.REACT_APP_API_KEY_CURRCONV\n\nexport function* convertCurrencySaga() {\n  const selectFromCurrency = yield call(makeSelectFromCurrency)\n  const fromCurrency = yield select(selectFromCurrency)\n  const selectToCurrency = yield call(makeSelectToCurrency)\n  const toCurrency = yield select(selectToCurrency)\n  const selectAmount = yield call(makeSelectAmount)\n  const amount = yield select(selectAmount)\n  try {\n    const response = yield call(apiRequest, CONVERT_ENDPOINT_PATH, {\n      apiKey: API_KEY,\n      q: composeCurrenciesQuery(fromCurrency, toCurrency)\n    })\n    const data = Converter.ComposeConverterData({ response, amount })\n    yield put(converterSetConvertResult(data))\n  } catch (e) {\n    console.log(e)\n  }\n}\n\nexport default function* defaultSaga() {\n  yield takeLatest(converterConvert, convertCurrencySaga)\n}\n"]},"metadata":{},"sourceType":"module"}