{"ast":null,"code":"var _jsxFileName = \"/home/hexen/Work/currency/src/components/ConverterControls/index.js\";\nimport React from 'react';\nimport { Header, Input } from 'semantic-ui-react';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { createStructuredSelector } from 'reselect';\nimport { makeSelectAmount, makeSelectConvertResult, makeSelectFromCurrency, makeSelectToCurrency } from '../../containers/Converter/selectors';\nimport CurrencyDropDown from '../../components/CurrencyDropDown';\nimport './index.css';\nimport { converterSetAmount, converterSetFromCurrency, converterSetToCurrency } from '../../containers/Converter/actions';\n\nconst ConverterControls = ({\n  onChangeTo,\n  onChangeFrom,\n  onChangeAmount,\n  amount,\n  from,\n  to\n}) => {\n  const onDefaultSearch = () => {\n    onChangeTo(['USD', 'EUR', 'SGD']);\n    onChangeFrom('GBP');\n    onChangeAmount(200);\n  };\n\n  return React.createElement(\"div\", {\n    className: \"converter-controls\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }, React.createElement(Header, {\n    as: \"h1\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }, \"Convert\"), React.createElement(\"a\", {\n    href: \"#\",\n    onClick: onDefaultSearch,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }, React.createElement(\"small\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, \"Default search\")), React.createElement(\"div\", {\n    className: \"converter-wrapper\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, React.createElement(Input, {\n    placeholder: \"Select Amount\",\n    type: \"number\",\n    className: \"amount\",\n    onChange: ({\n      target: {\n        value\n      }\n    }) => onChangeAmount(value),\n    value: amount,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }), React.createElement(CurrencyDropDown, {\n    selection: true,\n    placeholder: \"Select From\",\n    className: \"from\",\n    onChange: onChangeFrom,\n    value: from,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }), React.createElement(CurrencyDropDown, {\n    multiple: true,\n    fluid: true,\n    selection: true,\n    placeholder: \"Select To\",\n    onChange: onChangeTo,\n    value: to,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  })));\n};\n\nconst mapStateToProps = createStructuredSelector({\n  amount: makeSelectAmount(),\n  to: makeSelectToCurrency(),\n  from: makeSelectFromCurrency(),\n  convertResult: makeSelectConvertResult()\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onChangeFrom: payload => dispatch(converterSetFromCurrency(payload)),\n  onChangeTo: payload => dispatch(converterSetToCurrency(payload)),\n  onChangeAmount: payload => dispatch(converterSetAmount(payload))\n});\n\nconst withConnect = connect(mapStateToProps, mapDispatchToProps);\nexport default compose(withConnect)(ConverterControls);","map":{"version":3,"sources":["/home/hexen/Work/currency/src/components/ConverterControls/index.js"],"names":["React","Header","Input","connect","compose","createStructuredSelector","makeSelectAmount","makeSelectConvertResult","makeSelectFromCurrency","makeSelectToCurrency","CurrencyDropDown","converterSetAmount","converterSetFromCurrency","converterSetToCurrency","ConverterControls","onChangeTo","onChangeFrom","onChangeAmount","amount","from","to","onDefaultSearch","target","value","mapStateToProps","convertResult","mapDispatchToProps","dispatch","payload","withConnect"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { Header, Input } from 'semantic-ui-react'\nimport { connect } from 'react-redux'\nimport { compose } from 'redux'\nimport { createStructuredSelector } from 'reselect'\nimport {\n  makeSelectAmount,\n  makeSelectConvertResult,\n  makeSelectFromCurrency,\n  makeSelectToCurrency\n} from '../../containers/Converter/selectors'\nimport CurrencyDropDown from '../../components/CurrencyDropDown'\nimport './index.css'\nimport {\n  converterSetAmount,\n  converterSetFromCurrency,\n  converterSetToCurrency\n} from '../../containers/Converter/actions'\n\nconst ConverterControls = ({\n  onChangeTo,\n  onChangeFrom,\n  onChangeAmount,\n  amount,\n  from,\n  to\n}) => {\n  const onDefaultSearch = () => {\n    onChangeTo(['USD', 'EUR', 'SGD'])\n    onChangeFrom('GBP')\n    onChangeAmount(200)\n  }\n  return (\n    <div className=\"converter-controls\">\n      <Header as=\"h1\">Convert</Header>\n      <a href=\"#\" onClick={onDefaultSearch}>\n        <small>Default search</small>\n      </a>\n      <div className=\"converter-wrapper\">\n        <Input\n          placeholder=\"Select Amount\"\n          type=\"number\"\n          className=\"amount\"\n          onChange={({ target: { value } }) => onChangeAmount(value)}\n          value={amount}\n        />\n        <CurrencyDropDown\n          selection\n          placeholder=\"Select From\"\n          className=\"from\"\n          onChange={onChangeFrom}\n          value={from}\n        />\n        <CurrencyDropDown\n          multiple\n          fluid\n          selection\n          placeholder=\"Select To\"\n          onChange={onChangeTo}\n          value={to}\n        />\n      </div>\n    </div>\n  )\n}\n\nconst mapStateToProps = createStructuredSelector({\n  amount: makeSelectAmount(),\n  to: makeSelectToCurrency(),\n  from: makeSelectFromCurrency(),\n  convertResult: makeSelectConvertResult()\n})\n\nconst mapDispatchToProps = dispatch => ({\n  onChangeFrom: payload => dispatch(converterSetFromCurrency(payload)),\n  onChangeTo: payload => dispatch(converterSetToCurrency(payload)),\n  onChangeAmount: payload => dispatch(converterSetAmount(payload))\n})\n\nconst withConnect = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)\n\nexport default compose(withConnect)(ConverterControls)\n"]},"metadata":{},"sourceType":"module"}